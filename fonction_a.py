try:
    from mot_clef import replace
    def add_fonctions_a(liste_replace:list[replace]) -> list[replace]:
        liste_replace.append(replace("A", "A"))
        liste_replace.append(replace("A-LAW", "A-LAW"))
        liste_replace.append(replace("a-LAW", "a-LAW"))
        liste_replace.append(replace("a2b_base64", "ascii_vers_binaire_base64"))
        liste_replace.append(replace("a2b_hex", "ascii_vers_binaire_hex"))
        liste_replace.append(replace("a2b_qp", "ascii_vers_binaire_qp"))
        liste_replace.append(replace("a2b_uu", "ascii_vers_binaire_uu"))
        liste_replace.append(replace("a85decode", "decode_ascii85"))
        liste_replace.append(replace("a85encode", "encode_ascii85"))
        liste_replace.append(replace("abc", "module_classes_abstraites"))
        liste_replace.append(replace("ABC", "class_classes_abstraites"))
        liste_replace.append(replace("ABCMeta", "Métadonnées_classes_abstraites"))
        liste_replace.append(replace("abiflags", "drapeaux_abi"))
        liste_replace.append(replace("abort", "arrêter"))
        liste_replace.append(replace("above", "au_dessus"))
        liste_replace.append(replace("ABOVE_NORMAL_PRIORITY_CLASS", "CLASSE_PRIORITÉ_PLUS_HAUTE_QUE_NORMAL"))
        liste_replace.append(replace("abs", "valeur_absolue"))
        liste_replace.append(replace("absolute", "chemin_absolu_direct"))
        liste_replace.append(replace("abspath", "chemin_absolu"))
        liste_replace.append(replace("AbstractAsyncContextManager", "Manageur_Contexte_Async_Abstrait"))
        liste_replace.append(replace("AbstractBasicAuthHandler", "Rattrapeur_Authentification_Basique_Abstraite"))
        liste_replace.append(replace("AbstractChildWatcher", "Regardeur_Enfant_Abstrait"))
        liste_replace.append(replace("abstractclassmethod", "méthode_classes_abstraites"))
        liste_replace.append(replace("AbstractContextManager", "Manageur_Contexte_Abstrait"))
        liste_replace.append(replace("AbstractDigestAuthHandler", "Rattrapeur_Authentification_Digestive_Abstraite"))
        liste_replace.append(replace("AbstractEventLoop", "Boucle_Évennement_Abstraite"))
        liste_replace.append(replace("AbstractEventLoopPolicy", "Règles_Boucle_Évennement_Abstraite"))
        liste_replace.append(replace("abstractmethod", "méthode_abstraite"))
        liste_replace.append(replace("abstractproperty", "propriété_abstraite"))
        liste_replace.append(replace("AbstractSet", "Groupe_Abstrait"))
        liste_replace.append(replace("abstractstaticmethod", "méthode_abstraite_statique"))
        liste_replace.append(replace("accept", "accepter"))
        liste_replace.append(replace("access", "accéder"))
        liste_replace.append(replace("accumulate", "accumuler"))
        liste_replace.append(replace("aclose", "async_fermer"))
        liste_replace.append(replace("aclosing", "async_fermeture"))
        liste_replace.append(replace("acos", "async_cosinus"))
        liste_replace.append(replace("acosh", "async_cosinus_hyperbolique"))
        liste_replace.append(replace("acquire", "obtenir"))
        liste_replace.append(replace("acquire_lock", "obtenir_verrou"))
        liste_replace.append(replace("Action", "Action"))
        liste_replace.append(replace("action", "action"))
        liste_replace.append(replace("ACTIONS", "ACTIONS"))
        liste_replace.append(replace("active_children", "enfants_actifs"))
        liste_replace.append(replace("active_count", "nombre_enfants_actifs"))
        liste_replace.append(replace("actual", "actuelle"))
        liste_replace.append(replace("Add", "Additionner"))
        liste_replace.append(replace("add", "additionner"))
        liste_replace.append(replace("add_alias", "ajouter_alias"))
        liste_replace.append(replace("add_alternative", "ajouter_alternatif"))
        liste_replace.append(replace("add_argument", "ajouter_argument"))
        liste_replace.append(replace("add_argument_group", "ajouter_groupe_argument"))
        liste_replace.append(replace("add_attachment", "ajouter_fichier_attaché"))
        liste_replace.append(replace("add_cgi_vars", "ajouter_variable_interface_portail_commune_dans_env"))
        liste_replace.append(replace("add_charset", "ajouter_group_lettres"))
        liste_replace.append(replace("add_child_hangler", "ajouter_rattrapage_enfant"))
        liste_replace.append(replace("add_codec", "ajouter_codec_codage_lettres"))
        liste_replace.append(replace("add_cookie_header", "ajouter_en_tête_cookie"))
        liste_replace.append(replace("add_data", "ajouter_données"))
        liste_replace.append(replace("add_dll_directory", "ajouter_chemin_aux_chemins_DLL"))
        liste_replace.append(replace("add_done_callback", "ajouter_appel_retour_fin"))
        liste_replace.append(replace("add_fallback", "ajouter_renvoie"))
        liste_replace.append(replace("add_file", "ajouter_fichier"))
        liste_replace.append(replace("add_flag", "ajouter_drapeau"))
        liste_replace.append(replace("add_folder", "ajouter_dossier"))
        liste_replace.append(replace("add_get_handler", "ajouter_obtention_rattrapage"))
        liste_replace.append(replace("add_handler", "ajouter_rattrapage"))
        liste_replace.append(replace("add_header", "ajouter_en_tête"))
        liste_replace.append(replace("add_history", "ajouter_histoire"))
        liste_replace.append(replace("add_include_dir", "ajouter_dossier_include"))
        liste_replace.append(replace("add_label", "ajouter_label"))
        liste_replace.append(replace("add_library", "ajouter_bibliothèque"))
        liste_replace.append(replace("add_library_dir", "ajouter_dossier_bibliothèque"))
        liste_replace.append(replace("add_link_object", "ajouter_lien_objet"))
        liste_replace.append(replace("add_mutually_exclusive_group", "ajouter_groupe_mutuellement_exclusif"))
        liste_replace.append(replace("add_note", "ajouter_note"))
        liste_replace.append(replace("add_option", "ajouter_option"))
        liste_replace.append(replace("add_parent", "ajouter_parent"))
        liste_replace.append(replace("add_password", "ajouter_mot_de_passe"))
        liste_replace.append(replace("add_reader", "ajouter_lecteur"))
        liste_replace.append(replace("add_related", "ajouter_objet_liée"))
        liste_replace.append(replace("add_runtime_library_dir", "ajouter_temps_exécution_dossier_bibliothèque"))
        liste_replace.append(replace("add_section", "ajouter_section"))
        liste_replace.append(replace("add_sequence", "ajouter_séquence"))
        liste_replace.append(replace("add_set_handler", "ajouter_groupe_rattrapeur"))
        liste_replace.append(replace("add_signal_handler", "ajouter_rattrapeur_signal"))
        liste_replace.append(replace("add_stream", "ajouter_flux"))
        liste_replace.append(replace("add_subparser", "ajouter_sous_parseur"))
        liste_replace.append(replace("add_tables", "ajouter_tables"))
        liste_replace.append(replace("add_type", "ajouter_type"))
        liste_replace.append(replace("add_unredirected_header", "ajouter_en_tête_non_dirigé"))
        liste_replace.append(replace("add_writer", "ajouter_écrivain"))
        liste_replace.append(replace("addAsyncCleanup", "ajouterNettoyeurAsync"))
        liste_replace.append(replace("addaudithook", "ajoutercrochetaudition"))
        liste_replace.append(replace("addch", "ajouter"))
        liste_replace.append(replace("addClassCleanup", "ajouterNettoyageClasse"))
        liste_replace.append(replace("addCleanup", "ajouterNettoyage"))
        liste_replace.append(replace("addcomponent", "ajoutercomposant"))
        liste_replace.append(replace("addError", "ajouterErreur"))
        liste_replace.append(replace("addExpectedFailure", "ajouterRattagePrévu"))
        liste_replace.append(replace("addFailure", "ajouterRattage"))
        liste_replace.append(replace("addfile", "ajouterfichier"))
        liste_replace.append(replace("addFilter", "ajouterFilter"))
        liste_replace.append(replace("addHandler", "ajouterRattrapeur"))
        liste_replace.append(replace("addinfourl", "ajouterinformationsurl"))
        liste_replace.append(replace("addition", "addition"))
        liste_replace.append(replace("addLevelName", "ajouterNomNiveau"))
        liste_replace.append(replace("addModuleCleanup", "ajouterNettoyageModule"))
        liste_replace.append(replace("addnstr", "ajoutertextencurse"))
        liste_replace.append(replace("AddPackagePath", "AjouterCheminPaquet"))
        liste_replace.append(replace("addr", "adresseclient"))
        liste_replace.append(replace("addr_spec", "adresse_spécifique"))
        liste_replace.append(replace("Address", "Adresse"))
        liste_replace.append(replace("address", "adresse"))
        liste_replace.append(replace("address_exclude", "exclure_adresse"))
        liste_replace.append(replace("address_family", "famille_adresse"))
        liste_replace.append(replace("address_string", "texte_adresse"))
        liste_replace.append(replace("addresses", "adresses"))
        liste_replace.append(replace("AddressHeader", "EnTêteAdresse"))
        liste_replace.append(replace("addressof", "adressede"))
        liste_replace.append(replace("AddressValueError", "ajouter"))
        liste_replace.append(replace("addshape", "ajouterforme"))
        liste_replace.append(replace("addsitedir", "ajouterdossiersite"))
        liste_replace.append(replace("addSkip", "ajouterSaut"))
        liste_replace.append(replace("addstr", "ajoutertexte"))
        liste_replace.append(replace("addSubTest", "ajouterSousTest"))
        liste_replace.append(replace("addSuccess", "ajouterRéussite"))
        liste_replace.append(replace("addTest", "ajouterTest"))
        liste_replace.append(replace("addTests", "ajouterTests"))
        liste_replace.append(replace("addTypeEqualityFunc", "ajouterFonctionEgalitéType"))
        liste_replace.append(replace("addUnexpectedSuccess", "ajouterRéussiteNonPrévue"))
        liste_replace.append(replace("adjust_int_max_str_digits", "ajuster_taille_max_texte_conversion"))
        liste_replace.append(replace("adjusted", "ajusté"))
        liste_replace.append(replace("adler32", "afler32"))
        liste_replace.append(replace("ADPCM", "ADPCM"))
        liste_replace.append(replace("adpcm2lin", "ADPCMverslinéaire"))
        liste_replace.append(replace("AF_ALG", "CONNECTION_AF_ALG"))
        liste_replace.append(replace("AF_CAN", "CONNECTION_AF_CAN"))
        liste_replace.append(replace("AF_INET", "CONNECTION_AF_INET"))
        liste_replace.append(replace("AF_INET6", "CONNECTION_AF_INET6"))
        liste_replace.append(replace("AF_LINK", "CONNECTION_AF_LINK"))
        liste_replace.append(replace("AF_PACKET", "CONNECTION_AF_PACKET"))
        liste_replace.append(replace("AF_QIPCRTR", "CONNECTION_AF_QIPCRTR"))
        liste_replace.append(replace("AF_RDS", "CONNECTION_AF_RDS"))
        liste_replace.append(replace("AF_UNIX", "CONNECTION_AF_UNIX"))
        liste_replace.append(replace("AF_VSOCK", "CONNECTION_AF_VSOCK"))
        liste_replace.append(replace("aifc", "fichierappleaudioc"))
        liste_replace.append(replace("aiff", "fichierappleaudio"))
        liste_replace.append(replace("AIFF", "AIFF"))
        liste_replace.append(replace("AIFF-C", "AIFFC"))
        liste_replace.append(replace("aiter", "async_iter"))
        liste_replace.append(replace("alarm", "alarme"))
        liste_replace.append(replace("alaw2lin", "aLAWverslinéaire"))
        liste_replace.append(replace("ALERT_DESCRIPTION_HANDSHAKE_FAILURE", "ALERTE_DESCRIPTION_POIGNÉE_DE_MAIN_RATÉE"))
        liste_replace.append(replace("ALERT_DESCRIPTION_INTERNAL_ERROR", "ALERTE_DESCRIPTION_ERREUR_INTERNE"))
        liste_replace.append(replace("AlertDescription", "AlerteDescription"))
        liste_replace.append(replace("algorithms_available", "algorithmes_disponibles"))
        liste_replace.append(replace("algorithms_guaranteed", "algorithmes_garantis"))
        liste_replace.append(replace("Alias", "Alias"))
        liste_replace.append(replace("alias", "alias"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("alignment", "alignement"))
        liste_replace.append(replace("alive", "vivant"))
        liste_replace.append(replace("all", "tous"))
        liste_replace.append(replace("all_errors", "toutes_les_erreurs")
        liste_replace.append(replace("all_features", "toutes_les_fonctionnalitées")
        liste_replace.append(replace("all_frames", "tous_les_cadres")
        liste_replace.append(replace("all_properties", "toutes_les_propriétées")
        liste_replace.append(replace("all_suffixes", "tous_les_suffixes")
        liste_replace.append(replace("all_tasks", "toutes_les_tâches")
        liste_replace.append(replace("allocate_lock", "allouer_verrou"))
        liste_replace.append(replace("allocfunc", "allouerfonction"))
        liste_replace.append(replace("allow_reuse_address", "autoriser_la_réutilisation_d_adresse"))
        liste_replace.append(replace("allowed_domains", "domaines_autorisés")
        liste_replace.append(replace("alt", "alt"))
        liste_replace.append(replace("ALT_DIGITS", "CHIFFRES_ALT"))
        liste_replace.append(replace("altsep", "séparateuralternatif"))
        liste_replace.append(replace("altzone", "zonealternative"))
        liste_replace.append(replace("ALWAYS_EQ", "TOUJOURS_ÉGAL"))
        liste_replace.append(replace("ALWAYS_TYPED_ACTIONS", "ACTIONS_TOUJOURS_TYPÉES"))
        liste_replace.append(replace("AmbiguousOptionError", "ErreurOptionAmbigüe"))
        liste_replace.append(replace("AMPER", "ESPERLUETTE"))
        liste_replace.append(replace("AMPEREQUAL", "ESPERLUETTEÉGAL"))
        liste_replace.append(replace("anchor", "ancre"))
        liste_replace.append(replace("and", "et"))
        liste_replace.append(replace("And", "Et"))
        liste_replace.append(replace("and_", "et_"))
        liste_replace.append(replace("anext", "async_suivant"))
        liste_replace.append(replace("AnnAssign", "AffectationAnnotation"))
        liste_replace.append(replace("annotated", "annoté"))
        liste_replace.append(replace("Annotated", "Annoté"))
        liste_replace.append(replace("annotation", "annotation"))
        liste_replace.append(replace("annotations", "annotations"))
        liste_replace.append(replace("anonymous", "anonyme"))
        liste_replace.append(replace("answer_challenge", "défi_réponse"))
        liste_replace.append(replace("anticipate_failure", "échec_anticipé"))
        liste_replace.append(replace("Any", "Nimporte"))
        liste_replace.append(replace("ANY", "NIMPORTE"))
        liste_replace.append(replace("any", "nimporte"))
        liste_replace.append(replace("AnyStr", "NimporteTexte"))
        liste_replace.append(replace("api_version", "version_api"))
        liste_replace.append(replace("apilevel", "niveauapi"))
        liste_replace.append(replace("apop", "apop"))
        liste_replace.append(replace("APPDATA", "DONNÉESDAPPLICATION"))




        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))
        liste_replace.append(replace("__xor__", "__xou__"))vv
        return liste_replace
except ModuleNotFoundError:
    def add_fonctions_a(liste_replace:list) -> list:
        import sys
        print("Fonctions non chargées", file=sys.stderr)
        return liste_replace
